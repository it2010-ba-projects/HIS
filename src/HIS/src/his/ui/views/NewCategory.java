/*
    Copyright 2011 Silvio Wehner, Franziska Staake, Thomas Schulze
  
    This file is part of HIS.

    HIS is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    HIS is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with HIS.  If not, see <http://www.gnu.org/licenses/>.
 
 */
package his.ui.views;

import his.business.security.Rights;
import his.business.security.RightsManager;
import his.model.Categories;
import his.model.providers.CategoriesProvider;
import his.ui.events.ComponentChangedEvent;
import his.ui.events.ComponentChangedListener;
import his.ui.events.CreateCategoriesEvent;
import his.ui.events.CreateCategoriesListener;
import his.ui.validations.NotEmptyValidator;
import java.util.Collection;
import javax.swing.JOptionPane;

/**
 *
 * @author Franziska Staake, Thomas Schulze
 */
public class NewCategory extends javax.swing.JDialog {
 private Boolean doRefresh;
    
    /** Creates new form NewCatagory */
    public NewCategory(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();        
        txtCategoryName.setText("");
        catData.addComponentChangedListener(new ComponentChangedListener() {

            @Override
            public void componentChangedListenerPerfomed(ComponentChangedEvent evt) {
                fireCategoriesCreated(new CreateCategoriesEvent(this, getExpandedRows()));
            }
        });
    }
    
    /**
     * Erstellt einen neuen JDialog und initalisiert den Tree mit einer Liste
     * erweiterter Rows
     * @param parent
     * @param modal
     * @param expandedList 
     */
    public NewCategory(java.awt.Frame parent, boolean modal, Collection<Integer> expandedList)
    {
        this(parent, modal);
        catData.setExpandedRows(expandedList);
    }

    public Collection<Integer> getExpandedRows()
    {
        return catData.getExpandedRows();
    }
    
    protected javax.swing.event.EventListenerList createCategoriesListenerList =
        new javax.swing.event.EventListenerList();

    public void addCategoriesSearchListener(CreateCategoriesListener listener) {
        createCategoriesListenerList.add(CreateCategoriesListener.class, listener);
    }

    public void removeCategoriesSearchListener(CreateCategoriesListener listener) {
        createCategoriesListenerList.remove(CreateCategoriesListener.class, listener);
    }

    private void fireCategoriesCreated(CreateCategoriesEvent evt) {
        Object[] listeners = createCategoriesListenerList.getListenerList();
        // Each listener occupies two elements - the first is the listener class
        // and the second is the listener instance
        for (int i=0; i<listeners.length; i+=2) {
            if (listeners[i]==CreateCategoriesListener.class) {
                ((CreateCategoriesListener)listeners[i+1]).createCategoriesPerfomed(evt);
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtCategoryName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        btnCreate = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        catData = new his.ui.controls.CategoryData();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAlwaysOnTop(true);
        setIconImage(null);
        setModal(true);
        setResizable(false);

        jLabel1.setText("Name");

        txtCategoryName.setInputVerifier(new NotEmptyValidator(this, txtCategoryName, "Der Eintrag darf nicht leer sein"));
        txtCategoryName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCategoryNameKeyReleased(evt);
            }
        });

        jLabel2.setText("Position im Kategoriebaum");

        btnCreate.setText("Erstellen");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        btnCancel.setText("Abbrechen");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnCreate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnCancel))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCategoryName, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(catData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtCategoryName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addGap(1, 1, 1)
                .addComponent(catData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnCreate))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // Fenster schlie√üen
        fireCategoriesCreated(new CreateCategoriesEvent(this, getExpandedRows()));
        this.setVisible(false);  
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
       if( isDataValid() && RightsManager.hasRight(Rights.PURCHASE))
        {
            Collection<Integer> expanding;
            Categories cat;
            Categories parent;
            CategoriesProvider cProv = new CategoriesProvider(); 

            if(txtCategoryName.getText().equals(""))
            {
                JOptionPane.showMessageDialog(this, "Es muss ein Name eingegeben werden!");
                return;
            }

            for(Categories cats: cProv.findByName(txtCategoryName.getText()))
            {
                if(cats.getName().equals(txtCategoryName.getText()))
                {
                    JOptionPane.showMessageDialog(this, "Die Kategorie ist schon vorhanden!");
                    txtCategoryName.setText("");
                    return;
                }
            }

            parent = catData.getSelectedCategory();
            cat = new Categories();
            cat.setName(txtCategoryName.getText());   

            if(parent != null)
            {
                cat.setCategory(parent);
            }

            cProv.create(cat);
            expanding = catData.getExpandedRows();
            catData.setEditable(true);
            catData.refreshTree();
            catData.setEditable(false);

            catData.setExpandedRows(expanding);

            txtCategoryName.setText("");
        }
    }//GEN-LAST:event_btnCreateActionPerformed

    private void txtCategoryNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCategoryNameKeyReleased
        isDataValid();
    }//GEN-LAST:event_txtCategoryNameKeyReleased
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewCategory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewCategory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewCategory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewCategory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                NewCategory dialog = new NewCategory(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                
                if(RightsManager.hasRight(Rights.PURCHASE))
                {
                    dialog.setVisible(true);
                }   
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnCreate;
    private his.ui.controls.CategoryData catData;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField txtCategoryName;
    // End of variables declaration//GEN-END:variables

    private boolean isDataValid() {
        return this.txtCategoryName.getInputVerifier().verify(txtCategoryName);
    }
}
