/*
    Copyright 2011 Silvio Wehner, Franziska Staake, Thomas Schulze
  
    This file is part of HIS.

    HIS is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    HIS is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with HIS.  If not, see <http://www.gnu.org/licenses/>.
 
 */
package his.ui.views;

import his.HIS;
import his.model.Categories;
import his.model.Hardware;
import his.model.Manufacturers;
import his.model.Places;
import his.model.States;
import his.model.providers.CategoriesProvider;
import his.model.providers.HardwareProvider;
import his.model.providers.ManufacturersProvider;
import his.model.providers.PlacesProvider;
import his.model.providers.StatesProvider;
import his.ui.validations.*;
import java.awt.event.ItemEvent;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.UUID;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;

/**
 *
 * @author Franziska Staake
 */
public class NewHardware extends javax.swing.JDialog {
    /** Creates new form NewHardware */
    Hardware parentHardware;
    
    public NewHardware(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        parentHardware = null;
        
        categoryDataTree.setEditable(false);
        
        txtWarrantySpan.getDocument().addDocumentListener(new javax.swing.event.DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
                calculateWarrantyEnd();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                calculateWarrantyEnd();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                calculateWarrantyEnd();
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel8 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtWarrantyEnd = new javax.swing.JTextField();
        btnCancel = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        btnCreate = new javax.swing.JButton();
        txtPurchaseDate = new javax.swing.JTextField();
        txtReferingTo = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        comboWarrantySpan = new javax.swing.JComboBox();
        txtHardwareName = new javax.swing.JTextField();
        txtWarrantySpan = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtProductNumber = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        comboPlace = new javax.swing.JComboBox();
        comboManufacturer = new javax.swing.JComboBox();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        categoryDataTree = new his.ui.controls.CategoryData();

        setModal(true);
        setName("newHardwareDialog"); // NOI18N
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel8.setText("Garantiezeitraum");

        jLabel7.setText("Garantieende");

        txtWarrantyEnd.setEditable(false);
        txtWarrantyEnd.setToolTipText("Datumsformat: dd.mm.yyyy");
        txtWarrantyEnd.setInputVerifier(new IsEmptyOrValidDateValidator(this, txtWarrantyEnd, "ungültiges Datumsformat"));

        btnCancel.setText("Schließen");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        btnCancel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnCancelKeyPressed(evt);
            }
        });

        jLabel6.setText("Kaufdatum");

        btnCreate.setText("Anlegen");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        txtPurchaseDate.setToolTipText("Datumsformat: dd.mm.yyyy");
        txtPurchaseDate.setInputVerifier(new IsValidDateValidator(this, txtPurchaseDate, "Kein gültiges Datum eingeben!\n(Format: dd.mm.yyyy)"));

        txtReferingTo.setEditable(false);

        btnSearch.setText("Suchen");

        jLabel9.setText("Kategorie");

        jLabel5.setText("gehört zu");

        comboWarrantySpan.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Monat/e", "Jahr/e" }));
        comboWarrantySpan.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboWarrantySpanItemStateChanged(evt);
            }
        });

        txtHardwareName.setInputVerifier(new NotEmptyValidator(this, txtHardwareName, "Gerätename darf nicht leer sein!"));

        txtWarrantySpan.setInputVerifier(new IsEmptyOrNumericIntegerValidator(this, txtWarrantySpan, "Das Feld darf leer sein oder muss eine Zahl enthalten!"));

        jLabel1.setText("Gerätename");

        txtProductNumber.setEditable(false);
        txtProductNumber.setFocusTraversalPolicyProvider(true);
        txtProductNumber.setInputVerifier(new NotEmptyValidator(this, txtProductNumber, "Produktnummer darf nicht leer sein!"));

        jLabel4.setText("Ort");

        jLabel3.setText("Produktnummer");

        jLabel2.setText("Hersteller");

        comboPlace.setEditable(true);
        comboPlace.setFocusTraversalPolicyProvider(true);

        comboManufacturer.setEditable(true);
        comboManufacturer.setFocusTraversalPolicyProvider(true);
        comboManufacturer.setInputVerifier(new NotEmptyValidator(this, comboManufacturer, "Es muss ein Hersteller ausgewählt werden!"));

        jSeparator1.setPreferredSize(new java.awt.Dimension(100, 2));

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        categoryDataTree.setMaximumSize(new java.awt.Dimension(395, 147));
        categoryDataTree.setPreferredSize(new java.awt.Dimension(395, 147));
        jScrollPane1.setViewportView(categoryDataTree);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2)
                        .addGap(198, 198, 198))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel7)
                        .addGap(173, 173, 173))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(txtWarrantyEnd, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel1))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel6))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtHardwareName, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                                    .addComponent(jLabel5)
                                    .addComponent(txtReferingTo, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                                    .addComponent(comboManufacturer, 0, 236, Short.MAX_VALUE)
                                    .addComponent(txtPurchaseDate, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtProductNumber, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtWarrantySpan, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comboWarrantySpan, 0, 179, Short.MAX_VALUE))
                            .addComponent(jLabel4)
                            .addComponent(comboPlace, 0, 227, Short.MAX_VALUE)
                            .addComponent(btnSearch, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(615, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addComponent(btnCreate))
                    .addComponent(btnCancel))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel9)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtHardwareName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtProductNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(6, 6, 6)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtReferingTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnSearch))
                                .addGap(27, 27, 27)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(comboManufacturer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(comboPlace, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel8))
                                .addGap(5, 5, 5)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtPurchaseDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtWarrantySpan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(comboWarrantySpan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel7))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(96, 96, 96)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel4))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtWarrantyEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(12, 12, 12)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCreate)
                    .addComponent(btnCancel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancel(){
        // Fenster schließen
        this.setVisible(false);
    }
    
    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        cancel();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnCancelKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnCancelKeyPressed
        cancel();
    }//GEN-LAST:event_btnCancelKeyPressed
    
    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        // Validation und Hardware erstellen
        if(isDataValid() && createHardware()) {
            this.setVisible(false);
        }
        else {
            JOptionPane.showMessageDialog(rootPane, "Das Formular enthält Fehler.\nHardware konnte nicht gespeichert werden.",
                    "Speichern fehlgeschlagen", JOptionPane.ERROR_MESSAGE | JOptionPane.OK_OPTION );
        }
    }//GEN-LAST:event_btnCreateActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        initializeData();
    }//GEN-LAST:event_formWindowOpened

    private void comboWarrantySpanItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboWarrantySpanItemStateChanged
        // TODO Garantieende berechnen
        if(ItemEvent.SELECTED == evt.getStateChange()) {            
            calculateWarrantyEnd();
        }
    }//GEN-LAST:event_comboWarrantySpanItemStateChanged
    
    private boolean createHardware() {
        HardwareProvider hardwareProvider = new HardwareProvider();
        CategoriesProvider categoryProvider = new CategoriesProvider();
        Hardware hardware = new Hardware();
        Categories category;
        
        SimpleDateFormat formatter = new SimpleDateFormat("dd.MM.yyyy");
        Date purchaseDate;
        
        try {
            purchaseDate = formatter.parse(txtPurchaseDate.getText().trim());
            hardware.setPurchaseDate(purchaseDate);
        } catch (ParseException ex) {
            HIS.getLogger().error(ex);
            return false;
        }
        
        hardware.setName(txtHardwareName.getText().trim());
        hardware.setInventoryNumber(txtProductNumber.getText().trim());
        hardware.setPurchaseDate(purchaseDate);
        Manufacturers manufacturer = CreateOrGetManufacturer(comboManufacturer.getSelectedItem().toString().trim());
        hardware.setManufacturer(manufacturer);
        
        if(comboPlace.getSelectedItem() != null && 
                !comboPlace.getSelectedItem().toString().trim().isEmpty()) {
            Places place =  CreateOrGetPlace(comboPlace.getSelectedItem().toString().trim());
            hardware.setPlace(place);
        }
        
        if(!txtWarrantyEnd.getText().trim().isEmpty()) {
            try {
                Date warrantyEnd = formatter.parse(txtWarrantyEnd.getText().trim());
                hardware.setWarrantyEnd(warrantyEnd);
            } catch (ParseException ex) {
                HIS.getLogger().debug(ex);
            }
        }
        
        hardware.setHardware(parentHardware);
        
        if (hardware.getCategoriesCollection() == null) {
            hardware.setCategoriesCollection(new ArrayList<Categories>());
            
        }
        
        Collection<Categories> categoryCollection = hardware.getCategoriesCollection();        
        category = categoryDataTree.getSelectedCategory();
        
        if(category != null) {
            categoryCollection.add(category);
            
            if(category.getHardwareCollection() == null) {
                category.setHardwareCollection(new ArrayList<Hardware>());
            }
            
            Collection<Hardware> hardwareCollection = category.getHardwareCollection();
            hardwareCollection.add(hardware);
        }
        else {
            HIS.getLogger().error("Keine Kategorie ausgewählt!");
            return false;
        }
        
        Date warrantyEnd = null;
        
        if(!txtWarrantyEnd.getText().trim().isEmpty()) {
            try {
                warrantyEnd = formatter.parse(txtWarrantyEnd.getText().trim());                
            } catch (ParseException ex) {
                HIS.getLogger().debug(ex);
            }            
        }
        
        hardware.setWarrantyEnd(warrantyEnd);
        
        StatesProvider stateProvider = new StatesProvider();
        States state = stateProvider.findByName("lagernd");
        
        hardware.setState(state);
        
        
        try {
            hardwareProvider.create(hardware);
            categoryProvider.update(category);
        }
        catch (Exception e) {
            HIS.getLogger().debug(e);
            HIS.getLogger().warn("Speichern der Hardware fehlgeschlagen.");
            return false;
        }
        
        return true;
    }
    
    private boolean isDataValid() {
        boolean isDataValid = true;
        isDataValid = this.txtHardwareName.getInputVerifier().verify(txtHardwareName);
        isDataValid = this.txtProductNumber.getInputVerifier().verify(txtProductNumber) && isDataValid;
        isDataValid = this.txtPurchaseDate.getInputVerifier().verify(txtPurchaseDate) && isDataValid;
        isDataValid = this.comboManufacturer.getInputVerifier().verify(comboManufacturer) && isDataValid;
        isDataValid = this.txtWarrantyEnd.getInputVerifier().verify(txtWarrantyEnd) && isDataValid;
        isDataValid = this.txtWarrantySpan.getInputVerifier().verify(txtWarrantySpan) && isDataValid;
        return isDataValid;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            HIS.getLogger().error(ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                NewHardware dialog = new NewHardware(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnSearch;
    private his.ui.controls.CategoryData categoryDataTree;
    private javax.swing.JComboBox comboManufacturer;
    private javax.swing.JComboBox comboPlace;
    private javax.swing.JComboBox comboWarrantySpan;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField txtHardwareName;
    private javax.swing.JTextField txtProductNumber;
    private javax.swing.JTextField txtPurchaseDate;
    private javax.swing.JTextField txtReferingTo;
    private javax.swing.JTextField txtWarrantyEnd;
    private javax.swing.JTextField txtWarrantySpan;
    // End of variables declaration//GEN-END:variables

    private Manufacturers CreateOrGetManufacturer(String manufacturerName) {
        
        ManufacturersProvider manufacturerProvider = new ManufacturersProvider();
        Collection<Manufacturers> manufacturerCollection = manufacturerProvider.findByName(manufacturerName);
        
        Manufacturers manufacturer = null;
        if (!manufacturerCollection.isEmpty()) {
            manufacturer = manufacturerCollection.iterator().next();
        }
        else {
            manufacturer = new Manufacturers();
            manufacturer.setName(manufacturerName);
            manufacturerProvider.create(manufacturer);
        }
        
        return manufacturer;
        
    }
    
    
    private Places CreateOrGetPlace(String placeName) {
        
        PlacesProvider placesProvider = new PlacesProvider();
        Collection<Places> placesCollection = placesProvider.findByName(placeName);
        
        Places place = null;
        if (!placesCollection.isEmpty()) {
            place = placesCollection.iterator().next();
        }
        else {
            place = new Places();
            place.setName(placeName);
            placesProvider.create(place);
        }
        
        return place;
    }

    private void initializeData() {
        
        fillManufacturers();
        fillPlaces();
        
        txtProductNumber.setText(UUID.randomUUID().toString());
    }

    private void fillManufacturers() {
        ManufacturersProvider manufacturerProvider = new ManufacturersProvider();
        Collection<Manufacturers> manufacturerCollection = manufacturerProvider.findAll();
        
        comboManufacturer.addItem("");
        
        for(Manufacturers m: manufacturerCollection) {                
            comboManufacturer.addItem(m.getName());  
        } 
    }

    private void fillPlaces() {
        PlacesProvider placesProvider = new PlacesProvider();
        Collection<Places> placesCollection = placesProvider.findAll();
        
        comboPlace.addItem("");
        
        for(Places p: placesCollection) {                
            comboPlace.addItem(p.getName());  
        } 
    }

    private void calculateWarrantyEnd() {
        if(!(txtWarrantySpan.getText().trim().isEmpty() || txtPurchaseDate.getText().trim().isEmpty())) {
            SimpleDateFormat formatter = new SimpleDateFormat("dd.MM.yyyy");
            try {
                Date date = formatter.parse(txtPurchaseDate.getText().trim());
                Calendar cal = new GregorianCalendar();
                cal.setLenient(true);
                
                cal.setTime(date);
                                
                int timeSpanUnit;
                
                if(comboWarrantySpan.getSelectedItem().toString().equals("Monat/e")) {
                    timeSpanUnit = Calendar.MONTH;
                }
                else {
                    timeSpanUnit = Calendar.YEAR;
                }
                
                int timeSpan = Integer.parseInt(txtWarrantySpan.getText().trim());
                
                cal.add(timeSpanUnit, timeSpan);
                
                txtWarrantyEnd.setText(formatter.format(cal.getTime()));
            } catch (ParseException ex) {
                HIS.getLogger().warn(ex);
            }
        }
        else {
            txtWarrantyEnd.setText("");
        }
    }


    
}
