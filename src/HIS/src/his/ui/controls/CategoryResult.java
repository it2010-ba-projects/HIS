/*
    Copyright 2011 Silvio Wehner, Franziska Staake, Thomas Schulze
  
    This file is part of HIS.

    HIS is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    HIS is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with HIS.  If not, see <http://www.gnu.org/licenses/>.
 
 */
package his.ui.controls;

import his.business.CategoryResultBusiness;
import his.model.Categories;
import his.ui.NotEditableDefaultTableModel;
import his.ui.events.ResultShowEvent;
import his.ui.events.ResultShowListener;

/**
 *
 * @author Franziska Staake, Thomas Schulze
 */
public class CategoryResult extends javax.swing.JPanel {
    private CategoryResultBusiness catResultBusiness;
    private Categories selectedCategories;
    /** Creates new form UserResult */
    public CategoryResult() {
        initComponents();
    }  
    

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        tableCategories = new javax.swing.JTable();

        tableCategories.setModel(new NotEditableDefaultTableModel());
        tableCategories.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tableCategories.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tableCategoriesMousePressed(evt);
            }
        });
        tableCategories.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tableCategoriesKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(tableCategories);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 862, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tableCategoriesMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableCategoriesMousePressed
        selectCategoryAndShowIt();
    }//GEN-LAST:event_tableCategoriesMousePressed

    private void tableCategoriesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableCategoriesKeyReleased
        selectCategoryAndShowIt();
    }//GEN-LAST:event_tableCategoriesKeyReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tableCategories;
    // End of variables declaration//GEN-END:variables
    
    protected javax.swing.event.EventListenerList resultShowListenerList =
        new javax.swing.event.EventListenerList();

    public void addCategoriesResultShowListener(ResultShowListener listener) {
        resultShowListenerList.add(ResultShowListener.class, listener);
    }

    public void removeCategoriesResultShowListener(ResultShowListener listener) {
        resultShowListenerList.remove(ResultShowListener.class, listener);
    }

    void fireCategoriesResultShow(ResultShowEvent evt) {
        Object[] listeners = resultShowListenerList.getListenerList();
        // Each listener occupies two elements - the first is the listener class
        // and the second is the listener instance
        for (int i=0; i<listeners.length; i+=2) {
            if (listeners[i]==ResultShowListener.class) {
                ((ResultShowListener)listeners[i+1]).resultShowPerformed(evt);
            }
        }
    }
    
    private void selectCategoryAndShowIt()
    {
        selectedCategories = (Categories)tableCategories.getModel()
                                .getValueAt(tableCategories.getSelectedRow(),0);
        fireCategoriesResultShow(new ResultShowEvent(this));
    }
    /**
     * @return the catResultBusiness
     */
    public CategoryResultBusiness getCatResultBusiness() {
        return catResultBusiness;
    }

    /**
     * @param catResultBusiness the catResultBusiness to set
     */
    public void setCatResultBusiness(CategoryResultBusiness catResultBusiness) {
        this.catResultBusiness = catResultBusiness;
        showResults();
    }

    private void showResults() {
        NotEditableDefaultTableModel model = new NotEditableDefaultTableModel();
       
        model.addColumn("Kategorien");
       
        for(Categories cat : catResultBusiness.getCategories())
        {
            model.addRow(new Categories[] {cat});                       
        }
        
        tableCategories.setModel(model);
    }

    /**
     * @return the selectedCategories
     */
    public Categories getSelectedCategory() {
        return selectedCategories;
    }
}
