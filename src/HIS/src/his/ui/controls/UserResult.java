/*
    Copyright 2011 Silvio Wehner, Franziska Staake, Thomas Schulze
  
    This file is part of HIS.

    HIS is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    HIS is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with HIS.  If not, see <http://www.gnu.org/licenses/>.
 
 */
package his.ui.controls;

import his.business.UserResultBusiness;
import his.model.Users;
import his.ui.NotEditableDefaultTableModel;
import his.ui.events.ResultShowEvent;
import his.ui.events.ResultShowListener;


/**
 * Diese Klasse dient zur Auflistung aus {@link UserSearch} übergebener 
 * {@link Users}, Die Auflistung erfolgt in einer {@link JTable}
 * @author Franziska Staake
 */
public class UserResult extends javax.swing.JPanel {

    private UserResultBusiness userResultBusiness;
    private Users selectedUser;
    protected javax.swing.event.EventListenerList resultShowListenerList =
        new javax.swing.event.EventListenerList();
        
    /** Erstellt einen neue Form {@link UserResult} */
    public UserResult() {
        initComponents();
    }

    /**
     * 
     * @param listener  
     */
    public void addUserResultShowListener(ResultShowListener listener) {
        resultShowListenerList.add(ResultShowListener.class, listener);
    }

    /**
     * 
     * @param listener  
     */
    public void removeUserResultShowListener(ResultShowListener listener) {
        resultShowListenerList.remove(ResultShowListener.class, listener);
    }

    /**
     * 
     * @param evt  
     */
    void fireUserResultShow(ResultShowEvent evt) {
        Object[] listeners = resultShowListenerList.getListenerList();
        // Each listener occupies two elements - the first is the listener class
        // and the second is the listener instance
        for (int i=0; i<listeners.length; i+=2) {
            if (listeners[i]==ResultShowListener.class) {
                ((ResultShowListener)listeners[i+1]).resultShowPerformed(evt);
            }
        }
    }
    
    

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING12: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        tableUserResult = new javax.swing.JTable();

        tableUserResult.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tableUserResult.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tableUserResultMousePressed(evt);
            }
        });
        tableUserResult.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tableUserResultKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(tableUserResult);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 626, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(237, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 356, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * ausgewaehlter {@link Users} wird an {@link fireUserResultShow}
     * uebergeben, um dann in {@ UserData} angezeigt werden zu können
     * @param evt 
     */
    private void tableUserResultMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableUserResultMousePressed
        int[] row = tableUserResult.getSelectedRows();
        
        if(row.length < 2){
            selectedUser = (Users)tableUserResult.getValueAt(row[0],0);
            fireUserResultShow(new ResultShowEvent(this));
        }        
    }//GEN-LAST:event_tableUserResultMousePressed

    /**
     * ausgewählter {@link Users} wird an {@link fireUserResultShow}
     * uebergeben, um dann in {@ UserData} angezeigt werden zu können
     * @param evt
     */
    private void tableUserResultKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableUserResultKeyReleased
        int[] row = tableUserResult.getSelectedRows();
        
        if(row.length < 2){
            selectedUser = (Users)tableUserResult.getValueAt(row[0],0);
            fireUserResultShow(new ResultShowEvent(this));
        } 
    }//GEN-LAST:event_tableUserResultKeyReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tableUserResult;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the userResultBusiness
     */
    public UserResultBusiness getUserResultBusiness() {
        return userResultBusiness;
    }

    /**
     * @param userResultBusiness the userResultBusiness to set
     */
    public void setUserResultBusiness(UserResultBusiness userResultBusiness) {
        this.userResultBusiness = userResultBusiness;
        showResult();
    }

    /**
     * @return the selectedUser
     */
    public Users getSelectedUser() {
        return selectedUser;
    }

    /**
     * Erstellt das {@link TableModel} für die Tabelle, welche die gesuchten
     * {@link Users} enthalten soll
     */
    private void showResult() {
        // Tabelle mit Gruppen füllen
        NotEditableDefaultTableModel model = new NotEditableDefaultTableModel();
               
        // Spalte erstellen
        //model.addColumn("Vorname");
        model.addColumn("Nachname, Vorname");
        model.addColumn("Benutzername");
        //model.addColumn("Objekt");
        
        //model.addColumn("Gruppen");
       
        //alle Gruppen aus DB eintragen
        for(Users user : userResultBusiness.getUsers()){
            model.addRow(new Object[] {user, user.getLogin()});                       
        }
        
        //Tabellen-Modell der Tabelle zuweisen
        tableUserResult.setModel(model);   
    }
}
